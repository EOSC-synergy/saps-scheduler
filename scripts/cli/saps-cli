#!/bin/bash

. saps.properties

print_menu() {
	echo "Usage: $0 COMMAND [OPTIONS]"
	echo "Commands are GET, POST or PURGE"
	echo "GET | GET [task-id] -e | --email email"
	echo "POST --init-date init-date --end-date end-date --lower-left-latitude lower-left-latitude --lower-left-longitude lower-left-longitude --upper-right-latitude upper-right-latitude --upper-right-longitude upper-right-longitude --input-gathering-tag input-gathering-tag --input-reprocessing-tag input-reprocessing-tag --algorithm-execution-tag algorithm-execution-tag -e | --email email"
	echo "PURGE [day] -f | --force -e | --email email"
	echo "CREATEUSER -e | --email email -u | --user user-name -n | --notify yes|no"
	echo "UPDATE_USER_STATE --admin-email admin email -e | --email target user email -a | --active yes|no"
	exit 1
}

askPassword() {
	echo -n "Password: "
	read -s password
	echo
}

askPasswordConfirmation() {
	echo -n "Confirm password: "
	read -s passwordConfirmation
	echo
}

define_parameters() {
	while [ ! -z $1 ]; do
		case $1 in
			--admin-email)
				shift;
				admin=$1;
				;;
			-a | --active)
				shift;
				active=$1;
				;;
			-e | --email)
				shift;
				email=$1;
				;;
			-u | --user-name)
				shift;
				user=$1;
				;;
			-n | --notify)
				shift;
				notify=$1;
				;;
			-f | --force)
				shift;
				force="yes";
				;;
			-i | --task-id)
				shift;
				task_id=$1
				;;
			--init-date)
				shift;
				init_date=$1;
				;;
			--end-date)
				shift;
				end_date=$1;
				;;
			--lower-left-latitude)
				shift;
				lower_left_latitude=$1;
				;;
			--lower-left-longitude)
                                shift;
                                lower_left_longitude=$1;
                                ;;
                        --upper-right-latitude)
                                shift;
                                upper_right_latitude=$1;
                                ;;
                        --upper-right-longitude)
                                shift;
                                upper_right_longitude=$1;
                                ;;
                        --input-gathering-tag)
                                shift;
                                input_gathering_tag=$1;
                                ;;
                        --input-reprocessing-tag)
                                shift;
                                input_reprocessing_tag=$1;
                                ;;
                        --algorithm-execution-tag)
                                shift;
                                algorithm_execution_tag=$1;
                                ;;
		esac
		shift
	done
}

do_get() {

	define_parameters $@
	askPassword
	if [ $# -eq 2 ]
	then
		response=$(curl -H "userEmail: $email" -H "userPass: $password" "$host/images" 2> /dev/null)
		echo $response
	elif [ $# -eq 3 ]
	then
		echo "getting image by name $1"
        	response=$(curl -H "userEmail: $email" -H "userPass: $password" "$host/images/$1" 2> /dev/null)
        	echo $response
	else
		print_menu
		exit 1
	fi
}

do_post() {
	define_parameters $@
	askPassword
	if [[ "$init_date" == "" || "$end_date" == "" || "$lower_left_latitude" == "" || "$lower_left_longitude" == "" || "$upper_right_latitude" == "" || "$upper_right_longitude" == "" ]]
	then
		echo "ERROR: --init-date, --end-date, --lower-left-latitude, --lower-left-longitude, --upper-right-latitude and --upper-right-longitude are mandatories"
		print_menu
	else
        	response=$(curl --data "userEmail=$email&userPass=$password&initDate=$init_date&endDate=$end_date&lowerLeftLatitude=$lower_left_latitude&lowerLeftLongitude=$lower_left_longitude&upperRightLatitude=$upper_right_latitude&upperRightLongitude=$upper_right_longitude&inputGathering=$input_gathering_tag&inputPreprocessing=$input_preprocessing_tag&algorithmExecution=$algorithm_execution_tag" "$host/images" 2> /dev/null)
		echo $response
	fi
}

purge_task() {
	if [ ! $# -lt 1 ]
	then
		define_parameters $@
		askPassword
		day=$1
        	response=$(curl -X DELETE --data "userEmail=$email&userPass=$password&day=$day&force=$force" "$host/images" 2> /dev/null)
                echo $response
        else
		print_menu
		exit 1
        fi
}

create_user() {
	if [ ! $# -lt 6 ]
	then
		define_parameters $@
		askPassword
		askPasswordConfirmation
		if [ ! "$password" == "$passwordConfirmation" ]
		then
			echo "Password and password confirmation doesn't match"
		else
			response=$(curl --data "userEmail=$email&userName=$user&userPass=$password&userPassConfirm=$passwordConfirmation&userNotify=$notify" "$host/user/register" 2> /dev/null)
			echo $response
		fi
	else
		print_menu
		exit 1
	fi
}

update_state() {
	if [ ! $# -lt 6 ]
	then
		define_parameters $@
		askPassword
		response=$(curl -X PUT --data "adminEmail=$admin&adminPass=$password&userEmail=$email&userState=$active" "$host/users/$email" 2> /dev/null)
		echo $response
	else
		print_menu
		exit 1
	fi
}

if [ $# -gt 0 ]
then
    op=$1
    case "$op" in
        GET)
            shift
            do_get $@
        ;;
        POST)
            shift
            do_post $@
        ;;
        PURGE)
            shift
            purge_task $@
        ;;
        CREATEUSER)
            shift
            create_user $@
        ;;
	UPDATE_USER_STATE)
            shift
            update_state $@
        ;;
        *)
            print_menu
            exit 1
        ;;
    esac
else
	print_menu
	exit 1
fi
